●第２章達人のアプローチ
○専用の言語p57
問題領域に近いところでプログラミングする
	・ミニ言語
	要求を正確に表現できる
	単なる仕様でOK
	問題領域に近い言語（可読性も考慮）
	→プログラムやシステムに反映が簡単にできる。
	　正確に反映できる。

●第３章基本的なツール
基本的なツールのあるべき使い方やコツを紹介しています。

○プレイン・テキストの威力p72
知識をテキストに格納するとき、それが人間が読んで理解することが出来るというのが大切と言っている。
	印字可能な文字からなる、人間が直接読んで理解することが出来る形式
	→共通の標準（＝プレイン・テキスト）を用いたやり取りができる

	・透明性の保障
	プロジェクトの枠を超えてデータが長生きする
	・さまざまな活用ができる
	・テストが容易になる

○貝殻(シェル)遊びp77
シェルを使うことでGUIを超えた複合的な操作が出来るとの紹介です。
	・GUIでは出来ないような複合的な操作が可能
	・スクリプトファイルとしてまとめておけば、何度も行う作業を自動することも可能
	・シェル・ユーティリティー
		Cygwin  UWINなど

○パワー・エディットp82
エディターを知り尽くして生産性を向上させるためにエディターに備わっているべき基本的機能などを紹介しています。
	・１つのエディターを知り尽くして全ての編集作業がそれで行われることが理想
	→生産性の向上
	・反射的に操作できるようになることが目標
	
	・基本的機能
	設定可能であること。→全ての操作がキーボード上で行える
	拡張性があること。→新たな言語の登場などに備えられる
	プログラム可能であること→マクロの組み込みやスクリプティング用プログラム言語
	
	ソースコード編集に優れた機能→テンプレート補完、自動インデント、など

○ソースコード管理p87
修正の記録や後戻りが出来るということはソフトウェア開発にとってすさまじく有益なこと	
	・今と昔のバージョンの違いは？
	・このコードのどこを修正した？
	・誰がいつ修正した？
	・バグ修正とその他の作業を並行的に作業していける
	など便利

○デバッグp90
バグを見つける為の戦略やコツの紹介
	・非難するのではなく、問題を修復すること
	・パニックに陥らない→バグが起きたという思考に切り替える
	・常に問題の原因の根に目を向ける
	
	・バグを報告してきたユーザにインタビューすること
	・データ表示デバッガーを使う→「変数＝データ値」という可視化
	・時間的な経過を見るにはスタック・トレース
	
	仮定せずに証明すること

○テキスト操作p99
めんどくさい手作業をコンピュータにまかせること
	テキストの汎用的は編集作業など、常時行う作業をシステム化する。
	→ビルドシステムなどそうなのか？

○コード・ジェネレータp103
消極的なコードジェネレータ
	・タイピング量を減らす為のもの
	・新規ソースファイルの生成など	

積極的なコードジェネレータ
	・利便性を追求したもの
	・スキーマ変更に応じてソースコードを編集してくれるようなものなど