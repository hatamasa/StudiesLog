第6章コーディング段階

■31　偶発プログラミング
＠問題なく動作していたとしてもプログラムがなぜ動いているのかを把握すること
⇒バグ発生時に修正に時間がかかる

常に何をやっているのかを意識すること
信頼の置けるものだけを前提にする。仮定や偶然に依存してはいけない。

■32　アルゴリズムのスピード

O()記法で見積もる
⇒O(n*2)は同じものでも関係はわからないなどに注意する。

■33　リファクタリング
ｺｰﾄﾞ記述のやり直し、再構築、再設計などの総称

ｺｰﾄﾞをリファクタリングするときの基準
・二重化DRY原則に反している
・直行していない設計
・知識が時代遅れ
・パフォーマンスの改修

リファクタリングを早めにこまめにすること
⇒将来拡大した問題を修復する為に多くの時間を要することになる

■34　テストしやすいｺｰﾄﾞ
契約に対してテストを行う
⇒ｺｰﾄﾞが契約に合致しているのか、契約がわれわれの思っている通りになっているのかを確認するため

ｺｰﾄﾞ実装の前にテストを作成しておけばインターフェイスのテストをしていることにもなる。
⇒テストｺｰﾄﾞはソースコードに近いところに置くこと。モジュール内に埋め込むことでも良い。

ログファイルを設計せよ

■35　邪悪な魔法使い(ウィザード)
コードなどを自動で生成してくれるもの（コードジェネーター）
偶発的なプログラミングにならないように、理解できないウィザードのコードは使わないこと。

