第４章妄想の達人

■21　契約による設計
正しいプログラムを作る為に要求されたこと以上も、それ以下のことも行わない。

＠ルーチンと呼び出す側の契約
あるルーチンにおける全ての事前条件が呼び出し側で満足された場合、
ルーチンは作業完了時に全ての事後条件と全ての不変表明を保証する

・事前条件
ルーチンからの要求。正しいデータを引き渡すのは呼び出し側の責任。
・事後条件
そのルーチンが終了時に保証すること
・クラス不変表明
ルーチンの終了時に不変表明が保証される。

処理を始める前に受け付ける条件は厳格に、戻る際には可能な限り確約を少なくする。

＠仮定をドキュメントしておくこと
→トラブル発生時に起点に調査できる

＠契約違反となることが起きたときはクラッシュさせる

■22　死んだプログラムは嘘をつかない
＠早めにクラッシュさせること
例外を早めに補足すること。

■23　表明プログラミング
＠もし起こり得ないというのであれば、表明を用いてそれを証明すること
→事前条件をassertなどでチェックする。起こり得ないことをチェックする

■24　いつ例外を使用するか
＠例外的な問題のみに使用する
→エラーとの使い分けをする

■25　リソースのバランス方法
＠始めたことは終わらせること
→リソースを割り当てたルーチンがそのリソースを解放すること

・リソースは割り当てた順序と逆の順序で解放する
・コード中の異なった場所で同じ組のリソースを割り当てる場合、常に同じ順序で割り当てる
→デッドロックの可能性を削減することができる

javaではfinally節でリソースの解放を行うこともできる。
