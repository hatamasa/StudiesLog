【達人のアプローチ】

○二重化の過ちp26
・DRYの原則ーDont Repeat yourself繰り返しをさけること（達人プログラマーの道具の中で最重要なものの一つである）
→２箇所以上に同じ知識を記述すること（コード、ドキュメントなど）
→片方を変更すると、もう片方も変更しないとならない
修正コスト、メンテナンスコストなどの低下につながる

信頼性の高いソフトウェア開発、開発そのものを簡単にする、簡単なメンテナンス

・どのように二重化が発生するのか？p27
＠やむをえない二重化
＠不慮の二重化
＠手抜きの二重化
＠開発者間の二重化

・再利用しやすいようにしておくことp33

○直行性（独立性、分離性）
・直行性とは？p34
簡単な設計、製造、テスト、拡張できるシステムを構築する上で必要な重要な概念。
２つ以上の物事で片方を変更しても、もう片方に影響を与えない→直行している

関係の無いモノ同士の影響を排除すること
→局所的な変更が簡単にできるようになる
→生産性の向上、リスク削減（問題発生部分を切り離せる）

○可逆性p44
・確定事項として処理するのではなく、変わるかもしれないという対策を施しておくこと
→最終決定などというものは存在しない
直行性の話にも関わっている

○曳光弾p48
・曳光弾による開発は使い捨てではない
記述したものは残しておく、完全に動作するものではなくともその後徐々に肉付けをしていく
→様々な利点がある
＠早いうちからユーザーにものを見せることによるフィードバック
＠徐々にシステムを統合していくことでデバッグ、テストがより早く、正確になる
＠常にデモを見せることができる
＠進捗が明確になる

・リスク
目標が100％確かで無い段階では見直し、修正が発生する可能性がある
→しかし、肉付け部分の修正だったり、コード単位が小さくなるので修正が容易になる

・プロトタイプとの違い
プロトタイプ→使い捨て、システムの最終形態への理解を深めるためのもの
　　　　　　　コンセプトを確認した後は１から再構築する。
＠ポストイットノートp54に書いてあるようなものを学習することができます。
→プロトタイプの真の目的は学びにある

注意点：プロトを作成しているとき、全員が使い捨てだという意識があるかどうか。


○専用の言語：すいません。理解できなかった為パスします


○見積もりp64
・伝達したい正確性によって表現をかえる（単位を変える）p65
６ヶ月と130日と表現するのとでは捉えられる正確性にちがいがでる。

・経験者に尋ねる
・問題領域（なにがたずねられているのか）を考える
・モデルを作成する
・モデルをコンポーネントに分割
・パラメータに値を与える
・答えの算出


・全体通して３月中に終わるのか
・来週：専用の言語も含む